package me.fuji97.LoginUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import io.github.cdimascio.dotenv.Dotenv;
import me.fuji97.RegisterUI.RegisterForm;
import me.fuji97.RegisterUI.RegisterUI;
import me.fuji97.chatUI.ChatForm;
import me.fuji97.chatUI.ChatUI;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.Locale;

public class LoginUI {
    private JPanel Body;
    private JTextField inputUsername;
    private JPasswordField inputPassword;
    private JButton loginButton;
    private JButton registerButton;

    public LoginUI() {

        Dotenv dotenv = Dotenv.load();

        String url = dotenv.get("DB_URL");
        String db_username = dotenv.get("DB_USER");
        String db_password = dotenv.get("DB_PASSWORD");

        //กดปุ่ม Login
        loginButton.addActionListener(e -> {

            String inputUser = inputUsername.getText();
            String inputPass = inputPassword.getText();

            String sql = "SELECT * FROM user_data WHERE Username = ? AND Password = ?";

            try {
                assert url != null;
                Connection conn = DriverManager.getConnection(url, db_username, db_password);
                System.out.println("Connected successfully!");

                PreparedStatement stm = conn.prepareStatement(sql);
                stm.setString(1, inputUser);
                stm.setString(2, inputPass);
                ResultSet rs = stm.executeQuery();

                if (rs.next()) {

                    String DisplayName = rs.getString("DisplayName");

                    System.out.printf("Login Success!\nWelcome %s\n", rs.getString("Username"));

                    // ปิดหน้าจอ login และเปิด ChatForm
                    JFrame currentFrame = (JFrame) SwingUtilities.getWindowAncestor(Body);
                    currentFrame.dispose();
                    new ChatForm(DisplayName);

                } else {
                    System.out.println("Login Failed!");
                    JOptionPane.showMessageDialog(null, "ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง", "Login Failed", JOptionPane.ERROR_MESSAGE);
                }

                conn.close();

            } catch (SQLException ex) {
                System.out.println("Connection Failed: " + ex.getMessage());
                JOptionPane.showMessageDialog(null, "ไม่สามารถเชื่อมต่อฐานข้อมูลได้", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });
        //เปิดหน้า Register
        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame currentFrame = (JFrame) SwingUtilities.getWindowAncestor(Body);
                currentFrame.dispose();
                new RegisterForm();
            }
        });
    }

    public JPanel getBody() {
        return Body;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Body = new JPanel();
        Body.setLayout(new GridLayoutManager(9, 5, new Insets(0, 0, 0, 0), -1, -1));
        Body.setMaximumSize(new Dimension(400, 300));
        Body.setMinimumSize(new Dimension(400, 300));
        Body.setOpaque(true);
        Body.setPreferredSize(new Dimension(400, 300));
        final Spacer spacer1 = new Spacer();
        Body.add(spacer1, new GridConstraints(4, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 30), null, 0, false));
        final Spacer spacer2 = new Spacer();
        Body.add(spacer2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(70, -1), null, 0, false));
        inputUsername = new JTextField();
        Font inputUsernameFont = this.$$$getFont$$$("Arial", Font.PLAIN, 14, inputUsername.getFont());
        if (inputUsernameFont != null) inputUsername.setFont(inputUsernameFont);
        inputUsername.setText("");
        Body.add(inputUsername, new GridConstraints(3, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final Spacer spacer3 = new Spacer();
        Body.add(spacer3, new GridConstraints(3, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(70, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Username: ");
        Body.add(label1, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        inputPassword = new JPasswordField();
        Body.add(inputPassword, new GridConstraints(5, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Password: ");
        Body.add(label2, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setAlignmentY(0.0f);
        Font label3Font = this.$$$getFont$$$("Sarabun", Font.BOLD, 15, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setText("Chatbot Login");
        Body.add(label3, new GridConstraints(1, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        Body.add(spacer4, new GridConstraints(2, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 35), null, 0, false));
        final Spacer spacer5 = new Spacer();
        Body.add(spacer5, new GridConstraints(0, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        Body.add(panel1, new GridConstraints(7, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setText("Login");
        panel1.add(loginButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(40, 30), null, 0, false));
        registerButton = new JButton();
        registerButton.setText("Register");
        panel1.add(registerButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(40, 30), null, 0, false));
        final Spacer spacer6 = new Spacer();
        panel1.add(spacer6, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(30, -1), null, 0, false));
        final Spacer spacer7 = new Spacer();
        panel1.add(spacer7, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(30, -1), null, 0, false));
        final Spacer spacer8 = new Spacer();
        panel1.add(spacer8, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, 1, null, new Dimension(30, -1), null, 0, false));
        final Spacer spacer9 = new Spacer();
        Body.add(spacer9, new GridConstraints(8, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        final Spacer spacer10 = new Spacer();
        Body.add(spacer10, new GridConstraints(6, 0, 1, 5, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, 20), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Body;
    }

}
