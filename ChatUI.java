package me.fuji97.chatUI;

import me.fuji97.Model.Message;
import java.util.List;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import me.fuji97.API.GeminiAPI;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Locale;

public class ChatUI {
    private JPanel Body;
    private JTextField inputText;
    private JButton sendButton;
    private JTextPane textPane;


    public ChatUI(String DisplayName) {

        String aiName = "คำมี";

        List<Message> history = new ArrayList<>();

        history.add(new Message("user", "คุณเป็นผู้ชายชื่อ " + aiName +
                "เรียกแทนตัวเองว่าอ้ายเป็นคนเหนือพูดกำเมืองแท้ๆ และเป็นแชทบอทคอยคุยเล่นเป็นเพื่อน ห้ามพูดใส่วงเล็บแสดงอารมณ์"));

//        history.add(new Message("user", "คุณชื่อ " + aiName +
//                "เป็นแชทบอทคอยพูดคุยเล่น ไม่ต้องมีสาระมากมายอะไรเลย ชอบใช้คำหยาบ ห้ามพูดใส่วงเล็บแสดงอารมณ์"));

//        history.add(new Message("user",
//                "คุณเป็นผู้ชายชื่อ " + api.getAiName() +
//                        " เป็นคนอีสาน พูดจาสำเนียงอีสานแท้ๆ เรียกตัวเองว่า 'อ้าย' ห้ามพูดใส่วงเล็บแสดงอารมณ์"));

        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String text = inputText.getText();
                if (text.isEmpty()) return;

                appendTitle(DisplayName + ":\n", Color.CYAN);
                appendWithColor(text + "\n", Color.WHITE);
                inputText.setText("");

                history.add(new Message("user", text)); // เพิ่มข้อความผู้ใช้

                new Thread(() -> {
                    try {
                        String reply = GeminiAPI.ask(history); // ส่ง history ทั้งหมด

                        history.add(new Message("model", reply)); // บันทึกคำตอบด้วย

                        SwingUtilities.invokeLater(() -> {
                            appendTitle(aiName + ":\n", Color.MAGENTA);
                            appendWithColor(reply + "\n", Color.WHITE);
                        });
                    } catch (Exception ex) {
                        SwingUtilities.invokeLater(() -> {
                            appendTitle("ERROR:\n", Color.RED);
                            appendWithColor(ex.getMessage() + "\n", Color.RED);
                        });
                    }
                }).start();
            }
        });

        // เอาไว้กด Enter เพื่อส่ง
        inputText.addActionListener(e -> sendButton.doClick());
    }

    public JPanel getBody() {
        return Body;
    }

    private void appendTitle(String text, Color color) {
        StyledDocument doc = textPane.getStyledDocument();
        Style style = textPane.addStyle("Title Style", null);
        StyleConstants.setForeground(style, color);
        StyleConstants.setBold(style, true);
        try {
            doc.insertString(doc.getLength(), text, style);
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    private void appendWithColor(String text, Color color) {
        StyledDocument doc = textPane.getStyledDocument();
        Style style = textPane.addStyle("Text Style", null);
        StyleConstants.setForeground(style, color);
        try {
            doc.insertString(doc.getLength(), text, style);
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }


    //ห้ามขีดเขียนนนน ตั้งแต่ตรงนี้ลงไป มันคือโค้ดที่ตัว GUI Designer Gen ขึ้นมา ถ้าเผลอไปแก้ต้องลบฟอร์มทำใหม่

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Body = new JPanel();
        Body.setLayout(new GridLayoutManager(3, 4, new Insets(15, 15, 15, 15), -1, -1));
        Body.setMaximumSize(new Dimension(700, 500));
        Body.setMinimumSize(new Dimension(700, 500));
        Body.setPreferredSize(new Dimension(700, 500));
        inputText = new JTextField();
        Font inputTextFont = this.$$$getFont$$$("Tahoma", Font.PLAIN, 14, inputText.getFont());
        if (inputTextFont != null) inputText.setFont(inputTextFont);
        inputText.setMargin(new Insets(2, 9, 2, 6));
        inputText.setText("");
        Body.add(inputText, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 30), null, 0, false));
        sendButton = new JButton();
        sendButton.setText("Send");
        Body.add(sendButton, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 30), null, 0, false));
        final Spacer spacer1 = new Spacer();
        Body.add(spacer1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 15), null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        Body.add(scrollPane1, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textPane = new JTextPane();
        textPane.setBackground(new Color(-12105656));
        textPane.setEditable(false);
        textPane.setFocusable(false);
        Font textPaneFont = this.$$$getFont$$$("Tahoma", Font.PLAIN, 14, textPane.getFont());
        if (textPaneFont != null) textPane.setFont(textPaneFont);
        textPane.setMargin(new Insets(5, 5, 5, 5));
        scrollPane1.setViewportView(textPane);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Body;
    }

}
